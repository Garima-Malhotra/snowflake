//User Role
use role accountadmin;


//Database
create database if not exists SAFE_DB;
use SAFE_DB;


//Schema
create schema if not exists SAFE_Schema;


//Definition of Procedure
create or replace procedure Stored_Procedure()
  returns string not null
  language javascript
  execute as caller
  as     
  $$
    var database = "SAFE_DB";
    var schema = "SAFE_Schema";
    var tablename = new Array ("policies", "user_details", "userpolicies");
    
    //storing current time
    var current_date_obj = executeandreturn('select getdate();');
    current_date_obj.next();
    var current_date = current_date_obj.getColumnValue('GETDATE()');
    
    //Deleting old un-privileged table
    for (var i = 0; i < tablename.length ; i++) 
      {
        executeonly(`drop table if exists ${database}.${schema}.${tablename[i]};`);
      }
    
    //creating new un-privileged table
    executeonly(`create table ${database}.${schema}.${tablename[0]} (policy_name VARCHAR, created_at VARCHAR);`);
    executeonly(`create table ${database}.${schema}.${tablename[2]} (username VARCHAR, policy VARCHAR, created_at VARCHAR);`);
    executeonly("create table SAFE_DB.SAFE_Schema.user_details(username VARCHAR, disabled VARCHAR, ext_auth_duo VARCHAR, client_session_keep_alive VARCHAR, client_session_keep_alive_heartbeat_frequency VARCHAR, password_last_set VARCHAR, CurrentUser VARCHAR, created_at VARCHAR);");
    
    //fetch all the users
    var users = executeandreturn("show users;");
    
    //fetch the list of network policies
    var network_policies_object = executeandreturn("show network policies;");
    
    //condition to check whether network policies gives an output or not
    if (network_policies_object.getRowCount() === 0)
        {
         executeonly(`INSERT INTO ${database}.${schema}.${tablename[0]} VALUES ('Network policies do not exist','${current_date}');`);
        }
    else
         {
         while (network_policies_object.next())
           {
             //insert the result into SAFE_DB.SAFE_Schema.policies table
             var network_policy = network_policies_object.getColumnValueAsString('name');
             executeonly(`INSERT INTO ${database}.${schema}.${tablename[0]} VALUES ('${network_policy}','${current_date}');`);
           }
         }
    
    //condition for checking users
    if (users.getRowCount() === 0)
    {
      executeonly(`insert into ${database}.${schema}.${tablename[1]} values ('users are not accessible','','','','','','','${current_date}');`);
      executeonly(`insert into ${database}.${schema}.${tablename[2]} values ('users are not accessible','','${current_date}')`);
    }
    else
    {
      while(users.next())
        {
          if(users.getColumnValue('name')!='SNOWFLAKE')
            {
              //storing the username, diabled and ext_auth_duo for each user obtained using 'show users' command
              var name = users.getColumnValue('name');
              var disabled = users.getColumnValue('disabled');
              var ext_auth_duo = users.getColumnValue('ext_authn_duo');
              
              //fetch the list of user parameters and user description
              var user_parameters = executeandreturn("show parameters for user " + name);
              var user_desc = executeandreturn("desc user " + name);
              
              //iterate over user parameters
              while (user_parameters.next())
              {   
                //checking and storing the value of client_session_keep_alive & client_session_keep_alive_heart_freq for each user
                  var key = user_parameters.getColumnValue('key');
                  if (key === 'CLIENT_SESSION_KEEP_ALIVE')
                    {
                    var client_session_keep_alive = user_parameters.getColumnValueAsString('value');
                    }
                  else if (key === 'CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY')
                    {
                    var client_session_keep_alive_heart_freq = user_parameters.getColumnValueAsString('value');
                    }
                  else if(key === 'NETWORK_POLICY')
                    {
                    var user_policy = user_parameters.getColumnValueAsString('value');
                    executeonly(`insert into ${database}.${schema}.${tablename[2]} values ('${name}','${user_policy}','${current_date}')`);
                    }
              }
          
              //iterate over user descriptions
              while (user_desc.next())
              {
                  //checking and storing the value of password_last_set_time
                  var property = user_desc.getColumnValueAsString('property');
                  if (property === 'PASSWORD_LAST_SET_TIME')
                  {
                  var password_last_set_time = user_desc.getColumnValueAsString('value');
                  }
              }
              //storing the result of current_user
              var currentuserobject = executeandreturn("select current_user();");
              while(currentuserobject.next())
                {
                var currentuser = currentuserobject.getColumnValue('CURRENT_USER()')
                }
              executeonly(`insert into ${database}.${schema}.${tablename[1]} values ('${name}','${disabled}','${ext_auth_duo}','${client_session_keep_alive}','${client_session_keep_alive_heart_freq}','${password_last_set_time}','${currentuser}','${current_date}');`);
          }
        }
    }
    
    return "Successful Execution!";
    
    //custom function to execute sql statement
    function executeonly(query){
        snowflake.createStatement( { sqlText: query } ).execute();
        }
        
    //custom function to execute sql statement and return the output
    function executeandreturn(query){
        var output = snowflake.createStatement( { sqlText: query } ).execute();
        return output;
        }       
  $$
  ;
  
call Stored_Procedure();




--creating task
CREATE OR REPLACE TASK TASK_SAFE
  WAREHOUSE = COMPUTE_WH
  SCHEDULE = '10 MINUTE'
AS
CALL Stored_Procedure();




--starting the TASK
ALTER TASK TASK_SAFE RESUME;




--command to check TASK state
SELECT *
FROM table(
  information_schema.task_history(
    task_name=>'TASK_SAFE'
    ,scheduled_time_range_start=>dateadd('hour',-1,current_timestamp())
  )
);




--creating read-only role
create role IF NOT EXISTS read_only_role  comment = 'This role is limited to querying tables in SAFE_Schema';
--giving grants to the role
grant usage on database SAFE_DB to role read_only_role;
grant usage on schema SAFE_DB.SAFE_Schema to role read_only_role;
grant select on all tables in schema SAFE_DB.SAFE_Schema to role read_only_role;
grant role read_only_role  to role sysadmin;




--defining USERNAME & PASSWORD for the new read-only user
set (user_name , user_password) = ('SAFE_user','Safe@123');




--create a user with read-only role
create user IF NOT EXISTS SAFE_user LOGIN_NAME = $user_name password=$user_password default_role = read_only_role;
grant role read_only_role to user SAFE_user;




--creating output table for displaying information required for SAFE on-boarding
TRUNCATE TABLE IF EXISTS SAFE_Info;
CREATE TABLE IF NOT EXISTS SAFE_info (Username VARCHAR, User_Password VARCHAR);
INSERT INTO SAFE_info values($user_name, $user_password);
SELECT * FROM SAFE_info;